# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lqfOpiGabyXqssCXycPz2536zxe0a8tY
"""

import pandas as pd
import numpy as np

File = pd.read_csv('/content/AB_Test_Results-_2_-_1_.csv')
File

File.info()

File.isna().sum()

File.describe()

control = File[File['VARIANT_NAME'] == 'control']
treatment = File[File['VARIANT_NAME'] == 'variant']
print(f"Контрольная группа: {control.count()[0]} Тестовая группа: {treatment.count()[0]}")

double = File.groupby('USER_ID', as_index=False).agg({'VARIANT_NAME': pd.Series.nunique}).query('VARIANT_NAME > 1')

File = File[~File['USER_ID'].isin(double['USER_ID'])].sort_values('USER_ID').reset_index(drop=True)
File

File = File.drop_duplicates().reset_index(drop=True)
File

File['REVENUE'].describe()

File['VARIANT_NAME'].value_counts()

import scipy.stats as stats
from statsmodels.stats.power import TTestIndPower
import matplotlib.pyplot as plt
import seaborn as sns

File['conversion'] = File['REVENUE'].apply(lambda x: int(x>0))
File.pivot_table(index='VARIANT_NAME',
               columns='conversion',
               values='USER_ID',
               aggfunc='count',
               margins=True)

A = File.query('VARIANT_NAME == "control"')
B = File.query('VARIANT_NAME == "variant"')
n1, n2 = A.shape[0], B.shape[0]
m1, m2 = A[A['conversion']==1].shape[0], B[B['conversion']==1].shape[0]

p1, p2 = m1/n1, m2/n2
p1, p2

plt.figure(figsize=(5, 5))
sns.histplot(data=File, x='REVENUE', bins=20, hue='VARIANT_NAME');

plt.figure(figsize=(5, 5))
sns.histplot(data=File[File['conversion']==1], x='REVENUE', bins=20, hue='VARIANT_NAME');

plt.figure(figsize=(5, 5))
sns.boxplot(data=File[File['conversion']==1], y='REVENUE', x='VARIANT_NAME');

"""Группа В показывает низкие резульаты в сравнении с группой А."""

alpha = 0.05
pvalue = stats.shapiro(File['REVENUE'])[1]
print('Distribution is ' + ['','not'][pvalue < alpha] + ' normal')

stats.mannwhitneyu(x=A['REVENUE'].values, y=B['REVENUE'].values)

M1, M2 = A['REVENUE'].mean(), B['REVENUE'].mean()
D1, D2 = A['REVENUE'].var(), B['REVENUE'].var()

effect_size = (M1-M2)/np.sqrt(((n1-1)*D1 + (n2-1)*D2)/(n1+n2-2))
effect_size

analysis = TTestIndPower()
analysis.solve_power(effect_size=effect_size, alpha=alpha, power=None, nobs1=n1, ratio=n2/n1)

"""Из-за недостаточного объема выборки, получена статистически незначительную разницу.

Рекомендации:
1.Проверить систему сплитования трафика.
2.Проверить длительность теста, учитывая окно конверсии.
3.Рассчитать требуемый размер выборки и избегать преждевременной остановки теста.

Итог:
Не вводить изменения, на которых происходило тестирование группы B.
Рекомендуется уточнить или изменить дизай для нового запуска теста.
"""